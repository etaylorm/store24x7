# create-ledger <name> description <description> seed <seed> 
Create-ledger test description "test ledger" seed "cambridge"

# should be able to validate the blockchain even on the first block
validate

create-account evelyn

# should raise an error
create-account evelyn

create-account jonah

# process-transaction <transaction-id> amount <amount> fee <fee> payload <payload> payer <account-address> receiver <account-address>
process-transaction 1 amount 100 fee 10 payload "fund account" payer master receiver evelyn
process-transaction 2 amount 300 fee 10 payload "fund account" payer master receiver jonah

# expect error due to duplicate transaction id
process-transaction 2 amount 300 fee 100 payload "fund account" payer master receiver evelyn
process-transaction 3 amount 300 fee 20 payload "fund account" payer master receiver evelyn
process-transaction 4 amount 300 fee 50 payload "fund account" payer master receiver evelyn
process-transaction 5 amount 300 fee 70 payload "fund account" payer master receiver evelyn
process-transaction 6 amount 300 fee 20 payload "fund account" payer master receiver evelyn
process-transaction 7 amount 300 fee 10 payload "fund account" payer master receiver evelyn
process-transaction 8 amount 300 fee 130 payload "fund account" payer master receiver evelyn
process-transaction 9 amount 300 fee 1325 payload "fund account" payer master receiver evelyn

get-account-balances

process-transaction 10 amount 300 fee 4320 payload "fund account" payer master receiver evelyn

get-account-balances

get-block 1

get-block 0

get-account-balance evelyn

# expect error here
get-account-balance mary

# attempt to get a transaction that does not exist
get-transaction 20

# attempt to process a transaction between two accounts that do not exist
process-transaction 11 amount 300 fee 10 payload "fund account" payer bob receiver mary

# attempt to process a transaction between one account that does exist and one that doesn't
process-transaction 11 amount 30 fee 10 payload "transfer" payer bob receiver jonah

process-transaction 11 amount 500 fee 10 payload "fund account" payer evelyn receiver jonah

create-account michael

# should have no balance
get-account-balance michael

# get a transaction from the previous block
get-transaction 1

process-transaction 12 amount 20 fee 10 payload "uber" payer evelyn receiver michael
process-transaction 13 amount 20 fee 10 payload "uber" payer evelyn receiver michael
process-transaction 14 amount 20 fee 10 payload "uber" payer evelyn receiver michael
process-transaction 15 amount 20 fee 10 payload "uber" payer evelyn receiver michael
process-transaction 16 amount 20 fee 10 payload "uber" payer evelyn receiver michael
process-transaction 17 amount 20 fee 10 payload "uber" payer evelyn receiver michael
process-transaction 18 amount 20 fee 10 payload "uber" payer evelyn receiver michael
process-transaction 19 amount 20 fee 10 payload "uber" payer evelyn receiver michael
process-transaction 20 amount 20 fee 10 payload "uber" payer evelyn receiver michael

# show all account balances
get-account-balances 

# this transaction should fail since it exceeds the account balance for michael
process-transaction 21 amount 5000 fee 10 payload "food" payer michael receiver evelyn

# validate the state of the blockchain
Validate
