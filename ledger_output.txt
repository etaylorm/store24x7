# create-ledger <name> description <description> seed <seed> 
Create-ledger test description "test ledger" seed "cambridge"
ledger test created


# create-account <account-id>
create-account mary
account with ID mary created
create-account bob
account with ID bob created
create-account bill
account with ID bill created
create-account susan
account with ID susan created
create-account jack
account with ID jack created

# get-account-balance <account-id>
# expect error since not committed to a block
get-account-balance mary
com.cscie97.ledger.LedgerException: get-account-balance error: account has no committed balance


#process-transaction <transaction-id> amount <amount> fee <fee> payload <payload> payer <account-address> receiver <account-address>


process-transaction 1 amount 1000 fee 10 payload "fund account" payer master receiver mary
transaction with ID: 1 created
process-transaction 2 amount 1000 fee 10 payload "fund account" payer master receiver bob
transaction with ID: 2 created
process-transaction 3 amount 1000 fee 10 payload "fund account" payer master receiver bill
transaction with ID: 3 created
process-transaction 4 amount 1000 fee 10 payload "fund account" payer master receiver susan
transaction with ID: 4 created
process-transaction 5 amount 1000 fee 10 payload "fund account" payer master receiver mary
transaction with ID: 5 created


# expect error since the account mary has not been committed to a block
get-account-balance mary
com.cscie97.ledger.LedgerException: get-account-balance error: account has no committed balance


# should not show any account balances since no block has been committed
get-account-balances
{}


process-transaction 6 amount 1000 fee 10 payload "fund account" payer master receiver bob
transaction with ID: 6 created
process-transaction 7 amount 1000 fee 10 payload "fund account" payer master receiver bill
transaction with ID: 7 created
process-transaction 8 amount 1000 fee 10 payload "fund account" payer master receiver susan
transaction with ID: 8 created
process-transaction 9 amount 1000 fee 10 payload "fund account" payer master receiver mary
transaction with ID: 9 created
process-transaction 10 amount 1000 fee 10 payload "fund account" payer master receiver bob
transaction with ID: 10 created


# expect balance of 3000 for mary
get-account-balance mary
3000
# expect balance of 3000 for bob
get-account-balance bob
3000
# expect balance of 2000 for bill
get-account-balance bill
2000
# expect balance of 2000 for susan
get-account-balance susan
2000
# expect balance of 0 for jack
get-account-balance jack
0


# show the details of block #1
get-block 1
Block number: 1; Number of transactions: 10 Transactions: [Transaction ID: 1; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: mary; Fee: 10, Transaction ID: 2; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: bob; Fee: 10, Transaction ID: 3; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: bill; Fee: 10, Transaction ID: 4; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: susan; Fee: 10, Transaction ID: 5; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: mary; Fee: 10, Transaction ID: 6; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: bob; Fee: 10, Transaction ID: 7; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: bill; Fee: 10, Transaction ID: 8; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: susan; Fee: 10, Transaction ID: 9; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: mary; Fee: 10, Transaction ID: 10; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: bob; Fee: 10]


#show the details of transaction 10
get-transaction 10
Transaction ID: 10; Payer: master; Amount: 1000; Payload: "fund account"; Receiver: bob; Fee: 10


process-transaction 11 amount 200 fee 10 payload "september rent" payer susan receiver jack
transaction with ID: 11 created


# expect balance of 2000 for susan
get-account-balance susan
2000
# expect balance of 0 for jack
get-account-balance jack
0




process-transaction 12 amount 20 fee 10 payload "uber" payer bob receiver mary
transaction with ID: 12 created
process-transaction 13 amount 20 fee 10 payload "uber" payer bob receiver mary
transaction with ID: 13 created
process-transaction 14 amount 20 fee 10 payload "uber" payer bob receiver mary
transaction with ID: 14 created
process-transaction 15 amount 20 fee 10 payload "uber" payer bob receiver mary
transaction with ID: 15 created
process-transaction 16 amount 20 fee 10 payload "uber" payer bob receiver mary
transaction with ID: 16 created
process-transaction 17 amount 20 fee 10 payload "uber" payer bob receiver mary
transaction with ID: 17 created
process-transaction 18 amount 20 fee 10 payload "uber" payer bob receiver mary
transaction with ID: 18 created
process-transaction 19 amount 20 fee 10 payload "uber" payer bob receiver mary
transaction with ID: 19 created
process-transaction 20 amount 20 fee 10 payload "uber" payer bob receiver mary
transaction with ID: 20 created


# expect balance of 200 for jack
get-account-balance jack
200


# expect balance of 2000 - 200 - 10 => 1790
get-account-balance susan
1790


# expect balance of 3000 + 180 => 3180
get-account-balance mary
3180


# expect balance of 3000 - 180 - 90 => 2730
get-account-balance bob 
2730


# show all account balances for master, mary, bob, bill, susan, and jack
get-account-balances 
{bob=2730, susan=1790, mary=3180, bill=2000, jack=200, master=2147473747}


# this transaction should fail since it exceeds the account balance for “bob”.
process-transaction 21 amount 5000 fee 10 payload "food" payer bob receiver mary
com.cscie97.ledger.LedgerException: process-transaction error: payer account does not have sufficient funds


# this transaction should fail since the minimum fee is not provided  
process-transaction 22 amount 20 fee 5 payload "food" payer bob receiver mary
com.cscie97.ledger.LedgerException: process-transaction error: fee must be more than 10


# validate the state of the blockchain
Validate
blockchain validated
